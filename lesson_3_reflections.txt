This file was added from Github to show the use of the 'git pull' command...pretty cool!

Other things to figure out: 

  -Can I keep a working log of work to be done? This might be the only thing that would be useful at work (i.e. can I edit files that are already committed)?
  -I guess it might not be possible to 'add' a group of files? That's too bad...

When would you want to use a remote repository rather than keeping all your work local?

	- It is necessary when you want to collarborate with other people; maybe when you want to share your work with the open-source community; when you would like a back-up of your work and data to be preserved in case you lose your hard drive or laptop.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

	- If GitHub automatically pushed changes to the remotes, one, that would use up a lot of bandwidth unecessarily, two, it would also mean that any changes you made that were conflicts would have to be resolved by you - on GitHub's timeline...not an ideal timeline.

Forking - Describe the differences between forks, clones, and branches. When would you use one instead of another?

	- forking a repo is like cloning directly to your github account 'on' github (i.e. without first cloning to your computer). This lets you stay 'linked' to the original repo, and will make it easier to suggest changes to the original project.

	- cloning is when you want to pull a repo direct to your computer without putting an associated repo on GitHub; a "fork" does a lot of tihs work for you in terms of cloning it to your GitHub account and keeping it linked with the original repo. Additionally, when you clone this "fork" to your own computer, git automatically adds the remotes, so you can pull and push seemlessly without the additional hassle of running "git remote add <> <>"...

	- branches are separate, and they are mostly for keeping separate development efforts in a different category, to allow a feature or bug to be worked on/solved.


What is the benefit of having a copy of the last known state of the remote stored locally?

	- It means you are working with the most up-to-date version of the project.
	- This, in turn, ensures that potential merge-conflicts are minimized.
	
How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	- Collaboration without GitHub would be much more difficult for a variety of reasons:

		1. You would have to continuously, and update different versions of files that were being worked on.
		2. Worse yet, you would have to search for those differences manually, or using some sort of tool to help you.
		3. Worse still, in order to avoid those problems, you could split the work into different categories to 'divide' the problem to ensure no conflicts develop, but that sort of negates the whole point of having a tool such as git!
		4. Working on the same project means someone would have to manage the sets of files being worked on, be in charge of the 'master' copy/version, and then continuously send out up-to-date versions (over email or something) for people working on the project to have the most recent versions.
		5. Worse yet, you would then need to update 'your own' work with the differences introduced by everyone else's work into your own file set in order to resolve conflicts etc...
		6. Wow, just seems like git really streamlines the ability of people to work together on a project and cut down on the amount of BS admin work that would normally be required.
		7. Oh, worse yet, if you had to go 'back-in-time', you would have to reverse everything everyone had done to that point, potentially losing out on huge amounts of work and effort.
		8. All the communication would have to be manual, and you would need to include everyone on a mailing list or something in order to ensure people are kept in the loop.
		9. Git also compresses your files, so a lot of storage is saved. As opposed to other means, where you are making lots of copies of files, most of the time unecessarily - since many (most) files won't change from version to version.

	- Working without GitHub has few advantages - the one I can see right up front is that no one needs to know how to use git, or GitHub...beyond that, however, the benefits become pretty shallow...

	
What happens when you initialize a repository? Why do you need to do it?
	
	git will create a new folder/file system that will be used to track
all the future changes to the project. It has to be done in order to 'initialize' git...

How can you use the staging area to make sure you have one commit per logical change?

	The staging area lets me commit what I have 'ready' for commitment vs. what 
the most recent 'total set of changes' is. This lets me compare back and forth and ensure that what
I have ready for commitment makes sense and is logically related to each other, instead of being forced
to commit "everything" I have been working on (i.e. if some things aren't yet ready).

How do the diagrams help you visualize the branch structure?

	They, pretty obviously, will let you understand the structure of changes
that you have implemented in your code, but unfortunately, I'm not able to get
the same behavior out of the lesson that has been shown in the videos. UPDATE: I'm
now able to get the proper branch structure to show up. It required me to use '2' names
of branches on the command line (i.e. 'git log --oneline --graph master test-branch').

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Maybe I'm working on a new feature, and don't want to mix in a bunch of comments that
arent' related to the main thrust of the work effort into the middle of what everyone else
is working on. "Branching off" would help me containerize the changes that are all related 
to one feature along one logical branch.
	'branching' can also be thought of as 'context switching'. This allows someone to change
subjects of what they're working on and allows compartmentalization of features to take place (***This would be a good example of where I could 'change the contexts' of this exact repo and commit changes to my BOOK NOTES separately from the changes I make to notes I'm keeping by watching the Udacity videos; instead, they are all grouped together into one big hodgepodge chain of commits...I wonder if I can move old commits to a new branch??? hmmm...***). This, in turn, helps maintain a working featureful version of production code, but at the same time (in parallel) a version of the program that is similar, but being used for development.

*****THIS LINE ADDED TO TEST 'git log' TO SEE IF IT WILL SHOW MORE BRANCHES.*****

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	When you merge two branches, git will create a new commit and attempt to resolve any conflicts that exist within the different branches. You update the branch name to point to the new merged branches. It is represented in a way to show all the different commits chronologically, in addition to graphically, to help distinguish the different logical paths that are being included in the new commit.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

	Automatic merging makes simple changes easy to administer and incorporate into your file and makes it so the program doesn't waste your time with changes that are obvious to the overall system. When there are things that are more confusing, i.e. non-obvious modifications to code, git has to ask a human to look at the differences to resolve those conflicts - otherwise poor changes would be incorporated, which would likely lead to code that wouldn't work properly, and would likely not even compile.